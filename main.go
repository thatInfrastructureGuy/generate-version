/*
 * Copyright 2022 Kulkarni, Ashish <thatInfrastructureGuy@gmail.com>
 * Author: Ashish Kulkarni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//go:generate go run generateversion.go

package main

import (
	"flag"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

const (
	defaultFilename     = "version/const.go"
	defaultPackageName  = "version"
	defaultVariableName = "Version"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// Generated at {{ .Timestamp }}
package {{.PackageName}}

const {{.VariableName}} = "{{ .Version }}"
`))

func main() {
	filename, packageName, variableName := parseFlags()

	f, err := create(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp    time.Time
		PackageName  string
		VariableName string
		Version      string
	}{
		Timestamp:    time.Now(),
		PackageName:  packageName,
		VariableName: variableName,
		Version:      GetVersion(),
	})
}

func create(filename string) (*os.File, error) {
	if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
		return nil, err
	}
	f, err := os.Create(filename)
	if err != nil {
		return nil, err
	}
	return f, nil
}

func parseFlags() (string, string, string) {
	filePtr := flag.String("filepath", defaultFilename, "Filepath where contents should get generated. It should be a .go file.\nDefault: "+defaultFilename)
	packageNamePtr := flag.String("package", defaultPackageName, "Name of the package where file should be generated.\nDefault: "+defaultPackageName)
	variablePtr := flag.String("variable", defaultVariableName, "Variable name used to store version.\nDefault: "+defaultVariableName)

	return *filePtr, *packageNamePtr, *variablePtr
}

// GetVersion gets version by executing "git describe --abbrev=7 --dirty"
// Needs git binary present.
// In absense of git binary, version is set to "UNKNOWN"
func GetVersion() string {
	git, err := exec.LookPath("git")
	if err != nil {
		log.Println("Error finding git:", err)
		return "UNKNOWN"
	}

	output, err := exec.Command(git, "describe", "--dirty", "--abbrev=7").Output()
	if err != nil {
		log.Println("Error executing git describe:", err)
		return "UNKNOWN"
	}

	return strings.Trim(string(output), " \n\t\r")
}
